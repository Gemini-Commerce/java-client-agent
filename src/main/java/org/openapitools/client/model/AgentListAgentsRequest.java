/*
 * agent/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListRequestFilters;
import org.openapitools.client.model.ListRequestSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Agent.JSON;

/**
 * AgentListAgentsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T14:02:12.517032185Z[Etc/UTC]")
public class AgentListAgentsRequest {
  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_SORTS = "sorts";
  @SerializedName(SERIALIZED_NAME_SORTS)
  private List<ListRequestSort> sorts;

  public static final String SERIALIZED_NAME_FILTERS_MASK = "filtersMask";
  @SerializedName(SERIALIZED_NAME_FILTERS_MASK)
  private String filtersMask;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private ListRequestFilters filters;

  public AgentListAgentsRequest() {
  }

  public AgentListAgentsRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

   /**
   * Get pageToken
   * @return pageToken
  **/
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public AgentListAgentsRequest sorts(List<ListRequestSort> sorts) {
    this.sorts = sorts;
    return this;
  }

  public AgentListAgentsRequest addSortsItem(ListRequestSort sortsItem) {
    if (this.sorts == null) {
      this.sorts = new ArrayList<>();
    }
    this.sorts.add(sortsItem);
    return this;
  }

   /**
   * Get sorts
   * @return sorts
  **/
  @javax.annotation.Nullable
  public List<ListRequestSort> getSorts() {
    return sorts;
  }

  public void setSorts(List<ListRequestSort> sorts) {
    this.sorts = sorts;
  }


  public AgentListAgentsRequest filtersMask(String filtersMask) {
    this.filtersMask = filtersMask;
    return this;
  }

   /**
   * Get filtersMask
   * @return filtersMask
  **/
  @javax.annotation.Nullable
  public String getFiltersMask() {
    return filtersMask;
  }

  public void setFiltersMask(String filtersMask) {
    this.filtersMask = filtersMask;
  }


  public AgentListAgentsRequest filters(ListRequestFilters filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  public ListRequestFilters getFilters() {
    return filters;
  }

  public void setFilters(ListRequestFilters filters) {
    this.filters = filters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentListAgentsRequest agentListAgentsRequest = (AgentListAgentsRequest) o;
    return Objects.equals(this.pageToken, agentListAgentsRequest.pageToken) &&
        Objects.equals(this.sorts, agentListAgentsRequest.sorts) &&
        Objects.equals(this.filtersMask, agentListAgentsRequest.filtersMask) &&
        Objects.equals(this.filters, agentListAgentsRequest.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageToken, sorts, filtersMask, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentListAgentsRequest {\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    sorts: ").append(toIndentedString(sorts)).append("\n");
    sb.append("    filtersMask: ").append(toIndentedString(filtersMask)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageToken");
    openapiFields.add("sorts");
    openapiFields.add("filtersMask");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AgentListAgentsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentListAgentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentListAgentsRequest is not found in the empty JSON string", AgentListAgentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentListAgentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentListAgentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if (jsonObj.get("sorts") != null && !jsonObj.get("sorts").isJsonNull()) {
        JsonArray jsonArraysorts = jsonObj.getAsJsonArray("sorts");
        if (jsonArraysorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sorts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sorts` to be an array in the JSON string but got `%s`", jsonObj.get("sorts").toString()));
          }

          // validate the optional field `sorts` (array)
          for (int i = 0; i < jsonArraysorts.size(); i++) {
            ListRequestSort.validateJsonElement(jsonArraysorts.get(i));
          };
        }
      }
      if ((jsonObj.get("filtersMask") != null && !jsonObj.get("filtersMask").isJsonNull()) && !jsonObj.get("filtersMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filtersMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filtersMask").toString()));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        ListRequestFilters.validateJsonElement(jsonObj.get("filters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentListAgentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentListAgentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentListAgentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentListAgentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentListAgentsRequest>() {
           @Override
           public void write(JsonWriter out, AgentListAgentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentListAgentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgentListAgentsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgentListAgentsRequest
  * @throws IOException if the JSON string is invalid with respect to AgentListAgentsRequest
  */
  public static AgentListAgentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentListAgentsRequest.class);
  }

 /**
  * Convert an instance of AgentListAgentsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

